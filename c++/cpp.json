{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"rep": {
		"prefix": [
			"rep",
		],
		"body": [
			"REP(${1:i}, ${2:n})",
			"{",
			"  $3",
			"}",
		]
	},
	"rep3": {
		"prefix": [
			"rep3",
		],
		"body": [
			"REP3(${1:i}, ${2:0}, ${3:n}) {",
			"  $4",
			"}",
		]
	},
	"repin": {
		"prefix": [
			"repin",
		],
		"body": [
			"REP(${1:i}, ${2:n})",
			"{",
			"  cin >> ${3:a[i]};",
			"}",
		]
	},
	"repin2d": {
		"prefix": [
			"repin2d",
		],
		"body": [
			"REP(${1:i}, ${2:n}) REP(${3:j}, ${4:n})",
			"{",
			"  cin >> ${5:a[i][j]};",
			"}",
		]
	},
	"cin": {
		"prefix": [
			"cin",
		],
		"body": [
			"cin >> ${1:n};",
		]
	},
	"cout": {
		"prefix": [
			"cout",
		],
		"body": [
			"cout << ${1:ans} << endl;",
		]
	},
	"if": {
		"prefix": [
			"if",
		],
		"body": [
			"if (${1:1})",
			"{",
			"  $2",
			"}",
		]
	},
	"lambda": {
		"prefix": [
			"lambda",
		],
		"body": [
			"auto ${1:f} = [&]($2) -> ${3:void}",
			"{",
			"  $4",
			"};",
		]
	},
	// "lambda_recursion_cpp23": {
	// 	"prefix": [
	// 		"lambda",
	// 	],
	// 	"body": [
	// 		"auto ${1:dfs} = [&](this auto self, $2) -> ${3:void}",
	// 		"{",
	//  		"  ${4:self();}",
	// 		"dfs()",
	// 		"};",
	// 	]
	// },
	"lambda_recursion": {
		"prefix": [
			"lambda",
		],
		"body": [
			"auto ${1:dfs} = [&](auto self, $2) -> ${3:void} {",
			"  ${4:self(self);}",
			"};",
			"${1:dfs}(${1:dfs})",
		]
	},
	"lambda_oneliner": {
		"prefix": [
			"lambda",
		],
		"body": [
			"[&]() -> void { $1 }();",
		]
	},
}